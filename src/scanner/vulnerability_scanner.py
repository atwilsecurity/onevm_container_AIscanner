# src/scanner/vulnerability_scanner.py
import subprocess
import json
import os
import tempfile
from typing import Dict, List, Any
import uuid
from datetime import datetime

from src.mcp.client import MCPClient

class VulnerabilityScanner:
    def __init__(self, mcp_url: str = "http://localhost:8000"):
        self.mcp_client = MCPClient(mcp_url)
        
    def scan_image(self, image_name: str) -> str:
        """
        Scan a Docker image for vulnerabilities using Trivy and store results in MCP
        
        Args:
            image_name: Name of the Docker image to scan
            
        Returns:
            context_id: ID of the created MCP context
        """
        # Create a unique scan ID
        scan_id = str(uuid.uuid4())
        
        # Create initial context
        context = self.mcp_client.create_context(
            model_name="vulnerability_scanner",
            data={
                "image_name": image_name,
                "scan_id": scan_id,
                "status": "started",
                "vulnerabilities": []
            },
            metadata={
                "timestamp": datetime.now().isoformat(),
                "scan_type": "image_vulnerability_scan"
            }
        )
        
        context_id = context["context_id"]
        print(f"Created scan context for image {image_name} with ID: {context_id}")
        
        try:
            # Scan the image with Trivy
            vulnerabilities = self._scan_with_trivy(image_name)
            
            # Update context with findings
            self.mcp_client.update_context(
                context_id=context_id,
                model_name="vulnerability_analyzer",
                data={
                    "image_name": image_name,
                    "scan_id": scan_id,
                    "status": "completed",
                    "vulnerabilities": vulnerabilities,
                    "summary": self._generate_summary(vulnerabilities)
                },
                metadata={
                    "timestamp": datetime.now().isoformat(),
                    "scan_type": "image_vulnerability_scan"
                }
            )
            
            print(f"Updated context with {len(vulnerabilities)} vulnerabilities")
            
        except Exception as e:
            # Update context with error
            self.mcp_client.update_context(
                context_id=context_id,
                model_name="vulnerability_analyzer",
                data={
                    "image_name": image_name,
                    "scan_id": scan_id,
                    "status": "error",
                    "error": str(e)
                },
                metadata={
                    "timestamp": datetime.now().isoformat(),
                    "scan_type": "image_vulnerability_scan"
                }
            )
            print(f"Error scanning image: {str(e)}")
            
        return context_id
    
    def _scan_with_trivy(self, image_name: str) -> List[Dict[str, Any]]:
        """
        Scan an image using Trivy
        
        Args:
            image_name: Name of the Docker image to scan
            
        Returns:
            List of vulnerability objects
        """
        try:
            # Run Trivy directly with command output capture
            print(f"Running Trivy scan on {image_name}...")
            
            # Create a command that we know works from terminal
            cmd = [
                'trivy', 'image',
                '--format', 'json',
                '--no-progress',  # Disable progress bar
                '--quiet',        # Less verbose output
                image_name
            ]
            
            # Run the command and capture output
            result = subprocess.run(
                cmd, 
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                check=False  # Don't raise exception on non-zero exit
            )
            
            # Check for errors
            if result.returncode != 0:
                print(f"Trivy exited with code {result.returncode}")
                print(f"Error: {result.stderr}")
                return []
                
            # Check for empty output
            if not result.stdout or result.stdout.isspace():
                print("Trivy returned empty output")
                return []
                
            # Try to parse JSON
            try:
                trivy_results = json.loads(result.stdout)
            except json.JSONDecodeError as e:
                print(f"JSON decode error: {e}")
                print(f"Output preview: {result.stdout[:200]}")
                return []
                
            # Process results
            vulnerabilities = self._parse_trivy_results(trivy_results)
            print(f"Found {len(vulnerabilities)} vulnerabilities")
            return vulnerabilities
            
        except Exception as e:
            print(f"Error in Trivy scan: {str(e)}")
            import traceback
            traceback.print_exc()
            return []
    
    def _parse_trivy_results(self, trivy_results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Parse Trivy results into our standardized vulnerability format
        
        Args:
            trivy_results: Raw Trivy scan results
            
        Returns:
            List of vulnerability objects in our format
        """
        vulnerabilities = []
        
        # Trivy format might change across versions, so add error handling
        results = trivy_results.get('Results', [])
        
        for result in results:
            # Skip if no vulnerabilities found
            if 'Vulnerabilities' not in result:
                continue
                
            target = result.get('Target', 'unknown')
            target_type = result.get('Type', 'unknown')
            
            for vuln in result.get('Vulnerabilities', []):
                # Extract basic information
                vuln_id = vuln.get('VulnerabilityID', 'unknown')
                pkg_name = vuln.get('PkgName', 'unknown')
                installed_version = vuln.get('InstalledVersion', 'unknown')
                fixed_version = vuln.get('FixedVersion', '')
                severity = vuln.get('Severity', 'UNKNOWN').upper()
                description = vuln.get('Description', '')
                
                # Create standardized vulnerability object
                vulnerability = {
                    "id": vuln_id,
                    "severity": severity,
                    "package_name": pkg_name,
                    "package_version": installed_version,
                    "fixed_version": fixed_version,
                    "description": description,
                    "target": target,
                    "target_type": target_type,
                    "cvss_score": vuln.get('CVSS', {}).get('nvd', {}).get('V3Score', 0),
                    "references": vuln.get('References', [])
                }
                
                vulnerabilities.append(vulnerability)
        
        return vulnerabilities
    
    def _generate_summary(self, vulnerabilities: List[Dict[str, Any]]) -> Dict[str, int]:
        """
        Generate a summary of vulnerabilities by severity
        
        Args:
            vulnerabilities: List of vulnerability objects
            
        Returns:
            Dictionary with count by severity
        """
        summary = {
            "CRITICAL": 0,
            "HIGH": 0,
            "MEDIUM": 0,
            "LOW": 0,
            "UNKNOWN": 0
        }
        
        for vuln in vulnerabilities:
            severity = vuln.get("severity", "UNKNOWN").upper()
            if severity in summary:
                summary[severity] += 1
            else:
                summary["UNKNOWN"] += 1
                
        return summary